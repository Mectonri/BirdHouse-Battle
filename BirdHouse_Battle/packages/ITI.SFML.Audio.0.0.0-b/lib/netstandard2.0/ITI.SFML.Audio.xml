<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ITI.SFML.Audio</name>
    </assembly>
    <members>
        <member name="M:SFML.AudioNative.Load">
            <summary>
            Ensures that the native <see cref="F:SFML.System.CSFML.System"/> and <see cref="F:SFML.System.CSFML.Audio"/>
            are loaded.
            </summary>
        </member>
        <member name="T:SFML.Audio.Listener">
            <summary>
            The audio listener is the point in the scene
            from where all the sounds are heard
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.GlobalVolume">
            <summary>
            Gets or sets the volume between 0 and 100; it is combined with
            the individual volume of each sound / music.
            The default value for the volume is 100 (maximum).
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.Position">
            <summary>
            Gets or sets the 3D position of the listener. Default to (0, 0, 0).
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.Direction">
            <summary>
            Gets or sets the direction (also called "at vector").
            It is the vector pointing forward from the listener's perspective. 
            Together with the up vector, it defines the 3D orientation of the
            listener in the scene. The direction vector doesn't
            have to be normalized.
            The default listener's direction is (0, 0, -1).
            </summary>
        </member>
        <member name="P:SFML.Audio.Listener.UpVector">
            <summary>
            Gets or sets the up vector. 
            It is the vector that points upward from the
            listener's perspective. Together with the direction, it
            defines the 3D orientation of the listener in the scene.
            The up vector doesn't have to be normalized.
            The default listener's up vector is (0, 1, 0). It is usually
            not necessary to change it, especially in 2D scenarios.
            </summary>
        </member>
        <member name="T:SFML.Audio.Music">
            <summary>
            Streamed music played from an audio file.
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.#ctor(System.String)">
            <summary>
            Constructs a music from an audio file.
            </summary>
            <param name="filename">Path of the music file to open.</param>
        </member>
        <member name="M:SFML.Audio.Music.#ctor(System.IO.Stream)">
            <summary>
            Constructs a music from a custom stream.
            Since the music is not loaded at once but rather streamed continuously, 
            the stream must remain accessible until this Music object is disposed.
            </summary>
            <param name="stream">Source stream to read from.</param>
        </member>
        <member name="M:SFML.Audio.Music.#ctor(System.Byte[])">
            <summary>
            Constructs a music from an audio file in memory.
            </summary>
            <param name="bytes">Byte array containing the file contents.</param>
            <exception cref="T:SFML.System.LoadingFailedException" />
        </member>
        <member name="M:SFML.Audio.Music.Play">
            <summary>
            Starts or resumes playing the audio stream.
            <para>
            This function starts the stream if it was stopped, resumes
            it if it was paused, and restarts it from beginning if it
            was it already playing.
            This function uses its own thread so that it doesn't block
            the rest of the program while the stream is played.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.Pause">
            <summary>
            Pauses the audio stream.
            This function pauses the stream if it was playing,
            otherwise (stream already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.Stop">
            <summary>
            Stops playing the audio stream.
            This function stops the stream if it was playing or paused,
            and does nothing if it was already stopped.
            It also resets the playing position (unlike Pause()).
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.SampleRate">
            <summary>
            Gets the sample rate of the music.
            The sample rate is the number of audio samples played per
            second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.ChannelCount">
            <summary>
            Gets the number of channels (1 = mono, 2 = stereo).
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Status">
            <summary>
            Gets the current status of the music (see SoundStatus enum).
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Duration">
            <summary>
            Gets the total duration of the music.
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Loop">
            <summary>
            Gets or sets whether the music should loop after reaching the end.
            Defaults to false.
            <para>
            If set, the music will restart from beginning after
            reaching the end and so on, until it is stopped or
            Loop = false is set.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Pitch">
            <summary>
            Gets or sets the pitch of the music.
            Defaults to 1.0.
            <para>
            The pitch represents the perceived fundamental frequency
            of a sound; thus you can make a sound more acute or grave
            by changing its pitch. A side effect of changing the pitch
            is to modify the playing speed of the sound as well.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Volume">
            <summary>
            Gets os sets the volume of the music.
            The volume is a value between 0 (mute) and 100 (full volume).
            The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.Position">
            <summary>
            Gets or sets the 3D position of the music in the audio scene.
            Only sounds with one channel (mono sounds) can be
            spatialized.
            The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.RelativeToListener">
            <summary>
            Gets or sets whether the music's position is relative to the listener or absolute.
            The default value is false (position is absolute).
            <para>
            Making a sound relative to the listener will ensure that it will always
            be played the same way regardless the position of the listener.
            This can be useful for non-spatialized sounds, sounds that are
            produced by the listener, or sounds attached to it.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.MinDistance">
             <summary>
             Minimum distance of the music.
             The default value of the minimum distance is 1.0.
            <para>
             The "minimum distance" of a sound is the maximum
             distance at which it is heard at its maximum volume. Further
             than the minimum distance, it will start to fade out according
             to its attenuation factor. A value of 0 ("inside the head
             of the listener") is an invalid value and is forbidden.
            </para>
             </summary>
        </member>
        <member name="P:SFML.Audio.Music.Attenuation">
            <summary>
            Gets or sets the attenuation factor of the music.
            Default to 1.0.
            <para>
            The attenuation is a multiplicative factor which makes
            the music more or less loud according to its distance
            from the listener. An attenuation of 0 will produce a
            non-attenuated sound, i.e. its volume will always be the same
            whether it is heard from near or from far. On the other hand,
            an attenuation value such as 100 will make the sound fade out
            very quickly as it gets further from the listener.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Music.PlayingOffset">
            <summary>
            Gets or sets the current playing position of the music.
            This playing position can be changed when the music is
            either paused or playing.
            </summary>
        </member>
        <member name="M:SFML.Audio.Music.ToString">
            <summary>
            Provides a string describing the object
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.Music.Destroy(System.Boolean)">
            <summary>
            Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:SFML.Audio.SoundStatus">
            <summary>
            Enumeration of all possible sound states
            </summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Stopped">
            <summary>
            Sound is not playing.
            </summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Paused">
            <summary>
            Sound is paused.
            </summary>
        </member>
        <member name="F:SFML.Audio.SoundStatus.Playing">
            <summary>
            Sound is playing.
            </summary>
        </member>
        <member name="T:SFML.Audio.Sound">
            <summary>
            Regular sound that can be played in the audio environment.
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.#ctor">
            <summary>
            Default constructor (invalid sound).
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.#ctor(SFML.Audio.SoundBuffer)">
            <summary>
            Constructs the sound with a buffer.
            </summary>
            <param name="buffer">Sound buffer containing the audio data to play with the sound.</param>
        </member>
        <member name="M:SFML.Audio.Sound.#ctor(SFML.Audio.Sound)">
            <summary>
            Constructs the sound from another source.
            </summary>
            <param name="copy">Sound to copy</param>
        </member>
        <member name="M:SFML.Audio.Sound.Play">
            <summary>
            Starts or resumes playing the sound.
            <para>
            This function starts the stream if it was stopped, resumes
            it if it was paused, and restarts it from beginning if it
            was it already playing.
            This function uses its own thread so that it doesn't block
            the rest of the program while the sound is played.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.Pause">
            <summary>
            Pause the sound.
            <para>
            This function pauses the sound if it was playing,
            otherwise (sound already paused or stopped) it has no effect.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.Stop">
            <summary>
            Stops playing the sound.
            <para>
            This function stops the sound if it was playing or paused,
            and does nothing if it was already stopped.
            It also resets the playing position (unlike Pause()).
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.SoundBuffer">
            <summary>
            Gets the <see cref="P:SFML.Audio.Sound.SoundBuffer"/> containing the sound data to play through the sound.
            <para>
            It is important to note that the sound buffer is not copied,
            thus the SoundBuffer instance must remain alive as long
            as it is attached to the sound.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Status">
            <summary>
            Gets the current status of the sound (see <see cref="T:SFML.Audio.SoundStatus"/> enum).
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Loop">
            <summary>
            Gets or sets whether the sound should loop after reaching the end.
            <para>
            If set, the sound will restart from beginning after
            reaching the end and so on, until it is stopped or
            Loop = false is set.
            The default looping state for sounds is false.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Pitch">
            <summary>
            Gets or sets the pitch of the sound.
            <para>
            The pitch represents the perceived fundamental frequency
            of a sound; thus you can make a sound more acute or grave
            by changing its pitch. A side effect of changing the pitch
            is to modify the playing speed of the sound as well.
            The default value for the pitch is 1.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Volume">
            <summary>
            Gets or sets the volume of the sound.
            The volume is a value between 0 (mute) and 100 (full volume).
            The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.PlayingOffset">
            <summary>
            Gets or sets the current playing position of the sound.
            
            The playing position can be changed when the sound is
            either paused or playing.
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Position">
             <summary>
             Gets or sets the 3D position of the sound in the audio scene.
            
             Only sounds with one channel (mono sounds) can be
             spatialized.
             The default position of a sound is (0, 0, 0).
             </summary>
        </member>
        <member name="P:SFML.Audio.Sound.RelativeToListener">
            <summary>
            Gets or sets whether the music's position is relative to the listener or absolute.
            <para>
            Making a sound relative to the listener will ensure that it will always
            be played the same way regardless the position of the listener.
            This can be useful for non-spatialized sounds, sounds that are
            produced by the listener, or sounds attached to it.
            The default value is false (position is absolute).
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.MinDistance">
            <summary>
            Gets or sets the minimum distance of the sound.
            <para>
            The "minimum distance" of a sound is the maximum
            distance at which it is heard at its maximum volume. Further
            than the minimum distance, it will start to fade out according
            to its attenuation factor. A value of 0 ("inside the head
            of the listener") is an invalid value and is forbidden.
            The default value of the minimum distance is 1.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.Sound.Attenuation">
            <summary>
            Gets or sets the attenuation factor of the music.
            <para>
            The attenuation is a multiplicative factor which makes
            the music more or less loud according to its distance
            from the listener. An attenuation of 0 will produce a
            non-attenuated sound, i.e. its volume will always be the same
            whether it is heard from near or from far. On the other hand,
            an attenuation value such as 100 will make the sound fade out
            very quickly as it gets further from the listener.
            The default value of the attenuation is 1.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.Sound.ToString">
            <summary>
            Provides a string describing the object
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.Sound.Destroy(System.Boolean)">
            <summary>
            Handles the destruction of the object.
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:SFML.Audio.SoundBuffer">
            <summary>
            Storage for audio samples defining a sound.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.String)">
            <summary>
            Construct a sound buffer from a file
            
            Here is a complete list of all the supported audio formats:
            ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
            w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="filename">Path of the sound file to load</param>
            <exception cref="T:SFML.System.LoadingFailedException" />
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.IO.Stream)">
             <summary>
             Construct a sound buffer from a custom stream.
            
             Here is a complete list of all the supported audio formats:
             ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
             w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
             </summary>
             <param name="stream">Source stream to read from</param>
             <exception cref="T:SFML.System.LoadingFailedException" />
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.Byte[])">
            <summary>
            Constructs a sound buffer from a file in memory.
            <para>
            Here is a complete list of all the supported audio formats:
            ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
            w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </para>
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:SFML.System.LoadingFailedException" />
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(System.Int16[],System.UInt32,System.UInt32)">
            <summary>
            Constructs a sound buffer from an array of samples.
            </summary>
            <param name="samples">Array of samples</param>
            <param name="channelCount">Channel count</param>
            <param name="sampleRate">Sample rate</param>
            <exception cref="T:SFML.System.LoadingFailedException" />
        </member>
        <member name="M:SFML.Audio.SoundBuffer.#ctor(SFML.Audio.SoundBuffer)">
            <summary>
            Constructs a sound buffer from another sound buffer.
            </summary>
            <param name="copy">Sound buffer to copy</param>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.SaveToFile(System.String)">
            <summary>
            Saves the sound buffer to an audio file.
            <para>
            Here is a complete list of all the supported audio formats:
            ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
            w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </para>
            </summary>
            <param name="filename">Path of the sound file to write.</param>
            <returns>True if saving has been successful.</returns>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.SampleRate">
            <summary>
            Gets the sample rate of the sound buffer.
            <para>
            The sample rate is the number of audio samples played per
            second. The higher, the better the quality.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.ChannelCount">
            <summary>
            Gets the number of channels (1 = mono, 2 = stereo).
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.Duration">
            <summary>
            Gets the total duration of the buffer.
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBuffer.Samples">
            <summary>
            Gets the array of audio samples stored in the buffer.
            The format of the returned samples is 16 bits signed integer (Int16).
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.ToString">
            <summary>
            Provides a string describing the object.
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.SoundBuffer.Destroy(System.Boolean)">
            <summary>
            Handles the destruction of the object.
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:SFML.Audio.SoundBufferRecorder">
            <summary>
            Specialized SoundRecorder which saves the captured
            audio data into a sound buffer.
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundBufferRecorder.SoundBuffer">
            <summary>
            Gets the sound buffer containing the captured audio data.
            <para>
            The sound buffer is valid only after the capture has ended.
            This function provides a reference to the internal
            sound buffer, but you should make a copy of it if you want
            to make any modifications to it.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.ToString">
            <summary>
            Provides a string describing the object.
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnStart">
            <summary>
            Called when a new capture starts.
            </summary>
            <returns>False to abort recording audio data, true to continue.</returns>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnProcessSamples(System.Int16[])">
            <summary>
            Processes a new chunk of recorded samples.
            </summary>
            <param name="samples">Array of samples to process.</param>
            <returns>False to stop recording audio data, true to continue.</returns>
        </member>
        <member name="M:SFML.Audio.SoundBufferRecorder.OnStop">
            <summary>
            Called when the current capture stops.
            </summary>
        </member>
        <member name="T:SFML.Audio.SoundRecorder">
            <summary>
            Base class intended for capturing sound data.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Start(System.UInt32)">
            <summary>
            Starts the capture.
            <para>
            The sampleRate parameter defines the number of audio samples
            captured per second. The higher, the better the quality
            (for example, 44100 samples/sec is CD quality).
            This function uses its own thread so that it doesn't block
            the rest of the program while the capture runs.
            </para>
            Please note that only one capture can happen at the same time.
            </summary>
            <param name="sampleRate">Sound frequency; the more samples, the higher the quality (44100 by default = CD quality).</param>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Stop">
            <summary>
            Stops the capture
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.SampleRate">
            <summary>
            Gets the sample rate of the sound recorder.
            </summary>
            <remarks>
            The sample rate defines the number of audio samples
            captured per second. The higher, the better the quality
            (for example, 44100 samples/sec is CD quality).
            </remarks>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.ChannelCount">
            <summary>
            Gets or sets the channel count of the audio capture device.
            </summary>
            <remarks>
            This method allows you to specify the number of channels
            used for recording. Currently only 16-bit mono (1) and
            16-bit stereo (2) are supported.
            </remarks>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.IsAvailable">
            <summary>
            Checks if the system supports audio capture.
            </summary>
            <remarks>
            This function should always be called before using
            the audio capture features. If it returns false, then
            any attempt to use the SoundRecorder or one of its derived
            classes will fail.
            </remarks>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.ToString">
            <summary>
            Provides a string describing the object.
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnStart">
            <summary>
            Starts capturing audio data.
            This virtual function may be overridden by a derived class
            if something has to be done every time a new capture
            starts. If not, this function can be ignored; the default
            implementation does nothing.
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnProcessSamples(System.Int16[])">
             <summary>
             Processes a new chunk of recorded samples.
            
             This virtual function is called every time a new chunk of
             recorded data is available. The derived class can then do
             whatever it wants with it (storing it, playing it, sending
             it over the network, etc.).
             </summary>
             <param name="samples">Array of samples to process</param>
             <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.OnStop">
            <summary>
            Stops capturing audio data.
            This virtual function may be overridden by a derived class
            if something has to be done every time the capture
            ends. If not, this function can be ignored; the default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.SetProcessingInterval(SFML.System.Time)">
            <summary>
            The processing interval controls the period
            between calls to the onProcessSamples function. You may
            want to use a small interval if you want to process the
            recorded data in real time, for example.
            <para>
            Note: this is only a hint, the actual period may vary.
            So don't rely on this parameter to implement precise timing.
            </para>
            The default processing interval is 100 ms.
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.AvailableDevices">
            <summary>
            Gets the list of the names of all available audio capture devices.
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundRecorder.DefaultDevice">
            <summary>
            Gets the name of the default audio capture device.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.SetDevice(System.String)">
            <summary>
            Sets the audio capture device.
            </summary>
            <param name="Name">The name of the audio capture device.</param>
            <returns>True, if it was able to set the requested device.</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.GetDevice">
            <summary>
            Gets the name of the current audio capture device.
            </summary>
            <returns>The name of the current audio capture device.</returns>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.Destroy(System.Boolean)">
            <summary>
            Handles the destruction of the object.
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:SFML.Audio.SoundRecorder.ProcessSamples(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            Function called directly by the C library ; convert
            arguments and forward them to the internal virtual function
            </summary>
            <param name="samples">Pointer to the array of samples</param>
            <param name="nbSamples">Number of samples in the array</param>
            <param name="userData">User data -- unused</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="T:SFML.Audio.SoundStream">
            <summary>
            Abstract base class for streamed audio sources.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Play">
            <summary>
            Starts or resumes playing the audio stream.
            <para>
            This function starts the stream if it was stopped, resumes
            it if it was paused, and restarts it from beginning if it
            was it already playing.
            This function uses its own thread so that it doesn't block
            the rest of the program while the stream is played.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Pause">
            <summary>
            Pauses the audio stream.
            <para>
            This function pauses the stream if it was playing,
            otherwise (stream already paused or stopped) it has no effect.
            </para>
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.Stop">
            <summary>
            Stops playing the audio stream.
            <para>
            This function stops the stream if it was playing or paused,
            and does nothing if it was already stopped.
            It also resets the playing position (unlike pause()).
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.SampleRate">
            <summary>
            Gets the sample rate of the stream.
            <para>
            The sample rate is the number of audio samples played per
            second. The higher, the better the quality.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.ChannelCount">
            <summary>
            Gets the number of channels (1 = mono, 2 = stereo).
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Status">
            <summary>
            Gets the current status of the sound stream (see <see cref="T:SFML.Audio.SoundStatus"/> enum).
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Loop">
            <summary>
            Gets or sets whether the music should loop after reaching the end.
            The default looping state for music is false.
            <para>
            If set, the music will restart from beginning after
            reaching the end and so on, until it is stopped or
            Loop = false is set.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Pitch">
            <summary>
            Gets or sets the pitch of the stream.
            <para>
            The pitch represents the perceived fundamental frequency
            of a sound; thus you can make a sound more acute or grave
            by changing its pitch. A side effect of changing the pitch
            is to modify the playing speed of the sound as well.
            The default value for the pitch is 1.0.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Volume">
            <summary>
            Gets or sets the volume of the stream.
            <para>
            The volume is a value between 0 (mute) and 100 (full volume).
            The default value for the volume is 100.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Position">
            <summary>
            Gets or sets the 3D position of the stream in the audio scene.
            <para>
            Only sounds with one channel (mono sounds) can be
            spatialized.
            The default position of a sound is (0, 0, 0).
            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SFML.Audio.SoundStream.RelativeToListener" -->
        <member name="P:SFML.Audio.SoundStream.MinDistance">
            <summary>
            Gets or sets the minimum distance of the music.
            <para>
            The "minimum distance" of a sound is the maximum
            distance at which it is heard at its maximum volume. Further
            than the minimum distance, it will start to fade out according
            to its attenuation factor. A value of 0 ("inside the head
            of the listener") is an invalid value and is forbidden.
            The default value of the minimum distance is 1.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.Attenuation">
            <summary>
            Attenuation factor of the stream.
            <para>
            The attenuation is a multiplicative factor which makes
            the music more or less loud according to its distance
            from the listener. An attenuation of 0 will produce a
            non-attenuated sound, i.e. its volume will always be the same
            whether it is heard from near or from far. On the other hand,
            an attenuation value such as 100 will make the sound fade out
            very quickly as it gets further from the listener.
            The default value of the attenuation is 1.
            </para>
            </summary>
        </member>
        <member name="P:SFML.Audio.SoundStream.PlayingOffset">
            <summary>
            Gets or sets the current playing position of the stream.
            The playing position can be changed when the music is
            either paused or playing.
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.ToString">
            <summary>
            Provides a string describing the object.
            </summary>
            <returns>String description of the object.</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.Initialize(System.UInt32,System.UInt32)">
            <summary>
            Sets the audio stream parameters, you must call it before calling <see cref="M:SFML.Audio.SoundStream.Play"/>.
            </summary>
            <param name="channelCount">Number of channels.</param>
            <param name="sampleRate">Sample rate, in samples per second.</param>
        </member>
        <member name="M:SFML.Audio.SoundStream.OnGetData(System.Int16[]@)">
            <summary>
            Virtual function called each time new audio data is needed to feed the stream.
            </summary>
            <param name="samples">Array of samples to fill for the stream.</param>
            <returns>True to continue playback, false to stop.</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.OnSeek(SFML.System.Time)">
            <summary>
            Virtual function called to seek into the stream.
            </summary>
            <param name="timeOffset">New position.</param>
        </member>
        <member name="M:SFML.Audio.SoundStream.Destroy(System.Boolean)">
            <summary>
            Handles the destruction of the object.
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:SFML.Audio.SoundStream.Chunk">
            <summary>
            Structure mapping the C library arguments passed to the data callback
            </summary>
        </member>
        <member name="M:SFML.Audio.SoundStream.GetData(SFML.Audio.SoundStream.Chunk@,System.IntPtr)">
            <summary>
            Called each time new audio data is needed to feed the stream.
            </summary>
            <param name="dataChunk">Data chunk to fill with new audio samples.</param>
            <param name="userData">User data -- unused</param>
            <returns>True to continue playback, false to stop.</returns>
        </member>
        <member name="M:SFML.Audio.SoundStream.Seek(SFML.System.Time,System.IntPtr)">
            <summary>
            Called to seek in the stream.
            </summary>
            <param name="timeOffset">New position</param>
            <param name="userData">User data -- unused</param>
            <returns>If false is returned, the playback is aborted</returns>
        </member>
    </members>
</doc>
